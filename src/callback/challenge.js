/* 1. Primero debemos declarar e importar el paquete de XMLHttpRequest,
que nos permite utilizar objetos (XHR) para interactuar con servidores 
(es este caso la API de PLatzi) para esto hacemos:
    const XMLHttpRequest = require('xmlhttprequest'); 

- Lo que hace aqu√≠ "require()" es importar el m√≥dulo del id que le pasemos,
adem√°s puede importar JSON y archivos locales. Pero necesitamos trabajar 
con xmlhttprequest para manipular la API. 

2. Declaramos como constante el url de la API (Obtenemos la referencia al RUT de la API)

    const API = 'https://api.escuelajs.co/api/v1';

3. Ahora es momento de iniciar con la funci√≥n principal que en t√©rminos simples es:

    function fetchData(urlApi, callback){

    }

    - El par√°metro 'urlApi' hace referencia a cualquier API con la c√∫al estemos trabajando, en 
    este caso la FakeStore de Platzi 
    - El segundo par√°metro 'callback' es donde posteriormente vamos a pasar una funci√≥n como argumento 
    para poder controlar el flujo de informaci√≥n de la API. 

4. Necesitamos alguna manera de poder manipular las solicitudes que haremos para consultar los datos, 
para ello vamos a crear un espacio en memoria (una variable) en 
donde guardar el objeto (XHR) que importamos 
y gracias a los m√©todos ya construidos nos ser√° mil veces m√°s facil desarrollar nuestra funci√≥n. 

    let xhttp = new XMLHttpRequest();

    - Si estas familiarizado con OOP (Programaci√≥n orientada a Objetos) sabr√°s entonces que esto no es
    m√°s que un constructor vac√≠o.

5. Muy bien, ya podemos utilizar nuestra variable 'xhttp' (en conjunto al callback) como un objeto para
acceder y manipular la API. Primero debemos abrir una solicitud (un request) esto lo hacemos con el m√©todo .open()

    xhttp.open('GET', urlApi, true)

    - Ahora bien el primer par√°metro es el tipo de solicitud que vamos a realizar, pudo haber sido "POST", "PUT", "DELETE". 
    Pero vamos a utilizar "GET". 
    - El segundo par√°metro es la url de la API a la cu√°l le vamos a realizar el request. 
    - √öltimo y tercer par√°metro recibe un booleano para indicarle si vamos a utilizar as√≠ncronimo o no, tal siempre como TRUE 
    o FALSE seg√∫n el caso.
    
6. Vamos a hacer una funci√≥n an√≥nima para verificar que el request de los datos ha salido con √©xito y en caso de tener un error
hacer registro de √©ste. Para ello nos vamos a apoyar de la propiedad de '.onreadystatechange' √©ste llamar√° a la funci√≥n cada que 
el readyState cambie (readyState retorna el n√∫mero del estado en donde se encuntra el request).

    xhttp.onreadystatechange =  function (event) {
    }

    - Ahora bien el ciclo de vida del readyState es el siguiente: 
        0 => Se ha inicializado (El cliente ha sido creado. open() a√∫n no ha sido llamado)
        1 => Loading (Cargando) (Se ha llamado a open)
        2 => Se ha cargado (Se ha llamado a send(), y las cabeceras y el estado est√°n disponibles)
        3 => Procesamiento si existe alguna descarga (Descargado; responseText contiene datos parciales)
        4 => Completado (La operaci√≥n se ha completado)

    if(xhttp.readyState === 4){
    }

    - Una vez completado con √©xito necesitamos saber que tipo de respuesta nos entreg√≥ el servidor, as√≠ 
    que volvemos a verificar con un 'if' la propiedad '.status' seg√∫n ek tipo de respuestas: 

        1. Respuestas informativas (100 - 199)
        2. Respuestas satisfactorias (200 - 299)
        3. Redirecciones (300 - 399)
        4. Errores de los clientes (400 - 499)
        5. y errores de los servidores (500 - 599)

    if (xhttp.readyState === 4) {
        if (xhttp.status === 200) {
        } 
    }

    - ¬°Ya comprobamos que tanto el request como el response hayan sido exitosos! Ahora podemos invocar nuestro 
    callback (funci√≥n por definir m√°s tarde para manipular los datos)

    if (xhttp.readyState === 4) {
        if (xhttp.status === 200) {
            callback(null, JSON.parse(xhttp.responseText));
        } 
    }
        ¬øY por qu√© tiene tantos par√°metros el callback si a√∫n nisquiera lo hemos definido? ü§î Mira te explico:

        - El primero vamos a utilizarlo en caso de que se presente un error, pero como ya hemos verificado eso 
        podemos simplemente dejarlo como un ‚Äònull‚Äô.
        - En el segundo usamos la funci√≥n ‚ÄòJSON.parse()‚Äô para convertir en datos que podamos controlar el texto 
        que nos retorna la propiedad ‚Äò.responseText‚Äô despu√©s de hacer el request.

Listoü•≥, dejamos preparado nuestro callback sin errores y con la informaci√≥n ‚Äútraducida‚Äù para cualquier 
momento en el que necesitemos usarla. Pero (sep, siempre hay un ‚Äòpero‚Äô) ¬øY si el request no es exitoso?
¬øQu√© va a pasar con nuestra funci√≥n?üòî

    - Hay que regresarnos al primer if y utilizar la estructura de else para que en caso de haber un error registrarlo
    y enviarlo al callback (Donde antes habiamos puesto 'null') y ahora pasar el null en la parte de los datos, ya que nunca 
    pudo consultarlos. 

    -¬°¬°Acabamos la funci√≥n!!
    Ya solo resta utilizar el m√©todo ‚Äò.send()‚Äô despu√©s de procesar los datos para enviar el request al server (API)

*/
const XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;
const API = 'https://api.escuelajs.co/api/v1';

function fetchData(urlApi, callback) {
    let xhttp = new XMLHttpRequest(); /*XMLHttpRequest encargado de hacer las peticiones assincronicas lo instancia new. 
    Inicializa un objeto */

    xhttp.open('GET', urlApi, true); // open establecer conexi√≥n o prepara la petici√≥n
    xhttp.onreadystatechange = function (event) {
        if (xhttp.readyState === 4) { // petici√≥n finalizada
            if (xhttp.status === 200) { // documento encontrado, respuesta OK
                callback(null, JSON.parse(xhttp.responseText));
            } else {
                const error = new Error('Error' + urlApi);
                return callback(error, null);
            }
        }
    }

    xhttp.send(); /// Lanza la petici√≥n. 
}

/* Se invoca el metodo fetchData() pasandole como argumentos la variable API 
concatenda con la cadena 'products' para acceder a la URL de la API deseada, 
y una funci√≤n an√≥nima que recibe 2 par√°metros (un objeto de error y un arreglo 
que almacena todos los objetos traidos por la API*/

fetchData(`${API}/products`, function (error1, data1) {
    /*Se valida si existe un error, en caso que exista se detiene el proceso y se imprime el error*/
    if (error1) return console.error(error1);
    /*Se invoca nuevamente la funci√≥n fetchData con el fin de acceder a una objeto puntual del arreglo 
    data1, se envia como para√°metros la url de la API apuntando al atributo del primer objeto de arreglo 
    data1 y nuevamente una funci√≥n an√≥nima.*/
    fetchData(`${API}/products/${data1[0].id}`, function (error2, data2) {
        /*Si en este ounto se identifica un error se imprime en consola y se detiene el proceso.*/
        if (error2) return console.error(error2);
        /*Se invoca nuevamente la funci√≥n fetchData con el fin de acceder a la categoria. se env√≠a 
        como parametros la url de la API con la concatenaci√≥n de'Categories' y el atributo ID de 'Categories'
        y el atributo Id de categoria del objeto data2 de la funci√≥n anterior*/

        /*En este caso puntual se hace uso de Optional Chaining el cual hace una evaluaci√≥n de las 
        propiedades de un objeto y en vez arrojar un error devuelve undefined en caso que la propiedad no exista
        o sea nul.*/

        /*Igual que las anteriores e envia una funci√≥n anonima con 2 argumentos, un objeto Error y un objeto de datos*/
        fetchData(`${API}/categories/${data2?.category?.id}`, function (error3, data3) {
            /*Se validad si existe error, en caso de que exista se detiene el proceso y se imprime el error */
            if (error3) return console.error(error3);
            /*Se imprime el objeto en posici√≥n 1 del arreglo de los objetos obtenidos en el metodo invocado*/
            console.log(data1[0]);
            /*Se imprime el titulo del objeto que se consult√≥ en la segunda invocaci√≥n de la funci√≥n*/
            console.log(data2.title);
            /*Se imprime el nombre de la categoria a la que pretenece el objeto que se consult√≥ en la segunda 
            invocaci√≥n del m√©todo.*/
            console.log(data3.name);
        });
    })
})

